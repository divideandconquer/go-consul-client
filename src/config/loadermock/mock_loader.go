// Code generated by MockGen. DO NOT EDIT.
// Source: ../config/loader.go

// Package loadermock is a generated GoMock package.
package loadermock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockLoader) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLoaderMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoader)(nil).Get), key)
}

// Import mocks base method.
func (m *MockLoader) Import(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Import indicates an expected call of Import.
func (mr *MockLoaderMockRecorder) Import(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockLoader)(nil).Import), data)
}

// Initialize mocks base method.
func (m *MockLoader) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockLoaderMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockLoader)(nil).Initialize))
}

// MustGetBool mocks base method.
func (m *MockLoader) MustGetBool(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustGetBool", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MustGetBool indicates an expected call of MustGetBool.
func (mr *MockLoaderMockRecorder) MustGetBool(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustGetBool", reflect.TypeOf((*MockLoader)(nil).MustGetBool), key)
}

// MustGetDuration mocks base method.
func (m *MockLoader) MustGetDuration(key string) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustGetDuration", key)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// MustGetDuration indicates an expected call of MustGetDuration.
func (mr *MockLoaderMockRecorder) MustGetDuration(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustGetDuration", reflect.TypeOf((*MockLoader)(nil).MustGetDuration), key)
}

// MustGetInt mocks base method.
func (m *MockLoader) MustGetInt(key string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustGetInt", key)
	ret0, _ := ret[0].(int)
	return ret0
}

// MustGetInt indicates an expected call of MustGetInt.
func (mr *MockLoaderMockRecorder) MustGetInt(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustGetInt", reflect.TypeOf((*MockLoader)(nil).MustGetInt), key)
}

// MustGetString mocks base method.
func (m *MockLoader) MustGetString(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustGetString", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// MustGetString indicates an expected call of MustGetString.
func (mr *MockLoaderMockRecorder) MustGetString(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustGetString", reflect.TypeOf((*MockLoader)(nil).MustGetString), key)
}

// Put mocks base method.
func (m *MockLoader) Put(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockLoaderMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockLoader)(nil).Put), key, value)
}
